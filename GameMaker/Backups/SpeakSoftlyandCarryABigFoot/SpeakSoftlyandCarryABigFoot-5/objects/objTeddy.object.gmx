<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 20;
movespeed = 10;  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);

move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 20) vsp += grav;

if (place_meeting(x,y+1, obj_platform_mid))
{
   vsp = key_jump * -jumpspeed;
}

//Horizontal Collision middle platform
if (place_meeting(x+hsp, y, obj_platform_mid))
{
   while(!place_meeting(x+sign(hsp), y, obj_platform_mid)) //colliding elements must be called wall_obj
   {
     x+= sign(hsp);
   }
     hsp=0;
}
x += hsp;

//Vertical Collision middle platform
if (place_meeting(x, y+vsp, obj_platform_mid))
{
   while(!place_meeting(x, y+sign(vsp), obj_platform_mid))
   {
     y+= sign(vsp);
   }
     vsp=0;
}
y += vsp;
/*
//Horizontal Collision left platform
if (place_meeting(x+hsp, y, obj_platform_left))
{
   while(!place_meeting(x+sign(hsp), y, obj_platform_left)) //colliding elements must be called wall_obj
   {
     x+= sign(hsp);
   }
     hsp=0;
}


//Vertical Collision left platform
if (place_meeting(x, y+vsp, obj_platform_left))
{
   while(!place_meeting(x, y+sign(vsp), obj_platform_left))
   {
     y+= sign(vsp);
   }
     vsp=0;
}

//Horizontal Collision right platform
if (place_meeting(x+hsp, y, obj_platform_right))
{
   while(!place_meeting(x+sign(hsp), y, obj_platform_right)) //colliding elements must be called wall_obj
   {
     x+= sign(hsp);
   }
     hsp=0;
}
x += hsp;

//Vertical Collision right platform
if (place_meeting(x, y+vsp, obj_platform_right))
{
   while(!place_meeting(x, y+sign(vsp), obj_platform_right))
   {
     y+= sign(vsp);
   }
     vsp=0;
}
y += vsp;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
